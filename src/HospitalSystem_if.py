# Autogenerated from websocket_interface.template file
PharmecyNames = {
    "1": "Apótek Hafnarfjarðar",
    "2": "Lyf & heilsa Firði",
    "3": "Lyfja Setbergi",
}

patientRecords = {"1": ["Sara", "23"], "2": ["Daniel", "21"]}

MedicineNames = {"1": ["Ibufen"], "2": ["Sýklalyf"]}

PharmecyRequests = []


class Patients:
    def __init__(self, patients=None):
        self.patients = patientRecords

    def get_all_patients(self):
        return self.patients

    def get_patient(self, id):
        return self.patients[id]


class Medicine:
    def __init__(self, medicine=None):
        self.medicine = MedicineNames

    def get_all_medicine(self):
        return self.medicine

    def get_medicine(self, id):
        return self.medicine[id]


class Pharmecy:
    def __init__(self, pharmecy=None):
        self.pharmecy = PharmecyNames

    def get_all_pharmecy(self):
        return self.pharmecy

    def get_pharmecy(self, id):
        return self.pharmecy[id]


class HospitalsystemInterface:

    print("Welcome to the Hospital System!")

    def get_patient_info(self, data):
        # Here you call the actual operation in your backend code.
        return '{"msg":"Operation get_patient_info not yet implemented"}'

    def get_patient_appointments(self, data):
        if "doctor_id" in data:
            # Here you call the actual operation in your backend code.
            return '{"msg":"Operation get_patient_appointments not yet implemented"}'
        else:
            return '{"msg":"Invalid request. The following parameters are required: doctor_id."}'

    def delete_patient(self, data):
        if "patient_id" in data:
            # Here you call the actual operation in your backend code.
            return '{"msg":"Operation delete_patient not yet implemented"}'
        else:
            return '{"msg":"Invalid request. The following parameters are required: patient_id."}'

    def send_presription(self, data):
        patient = Patients()
        medicine = Medicine()
        pharmecy = Pharmecy()

        try:
            PharmecyRequests.append(
                [
                    pharmecy.get_pharmecy(data[0]),
                    patient.get_patient(data[2]),
                    medicine.get_medicine(data[4]),
                ]
            )
            print("The requests for the pharmecy are now: " + str(PharmecyRequests))

            return (
                '{"Order for medicine:'
                + str(PharmecyRequests[0][2][0])
                + " to pharmacy: "
                + str(PharmecyRequests[0][0])
                + " for patient: "
                + str(PharmecyRequests[0][1][0])
                + " }"
            )
        except:
            return '{"Order Failed"}'

    def create_patient(self, data):
        if "patient_data" in data:
            # Here you call the actual operation in your backend code.
            return '{"msg":"Operation create_patient not yet implemented"}'
        else:
            return '{"msg":"Invalid request. The following parameters are required: patient_data."}'

    def get_patient_list(self, data):
        if "doctor_id" in data:
            # Here you call the actual operation in your backend code.
            return '{"msg":"Operation get_patient_list not yet implemented"}'
        else:
            return '{"msg":"Invalid request. The following parameters are required: doctor_id."}'

    def assign_opperation(self, data):
        if "doctor_id" in data:
            # Here you call the actual operation in your backend code.
            return '{"msg":"Operation assign_opperation not yet implemented"}'
        else:
            return '{"msg":"Invalid request. The following parameters are required: doctor_id."}'
