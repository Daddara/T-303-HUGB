{"version":3,"sources":["components/Container/index.jsx","components/Navlinks/index.jsx","components/Navbar/index.jsx","constants/index.jsx","webSocketInterface.js","services/doctorService.jsx","actions/doctorsActions.jsx","components/DoctorsOverview/index.jsx","services/nurseService.jsx","actions/nursesActions.jsx","components/NursesOverview/index.jsx","services/patientService.jsx","actions/patientsActions.jsx","components/PatientsOverview/index.jsx","views/Home/index.jsx","actions/doctorActions.jsx","components/FormGroupInput/index.jsx","components/FormGroupButton/index.jsx","components/FormGroupDropdown/index.jsx","components/UpdateDoctorForm/index.jsx","views/Doctor/index.jsx","actions/nurseActions.jsx","components/UpdateNurseForm/index.jsx","views/Nurse/index.jsx","actions/patientActions.jsx","components/UpdatePatientForm/index.jsx","views/Patient/index.jsx","components/DoctorDetails/index.jsx","views/DoctorsList/index.jsx","components/NurseDetails/index.jsx","views/NursesList/index.jsx","components/PatientDetails/index.jsx","views/PatientsList/index.jsx","views/CreateDoctor/index.jsx","views/CreateNurse/index.jsx","views/CreatePatient/index.jsx","views/NotFound/index.jsx","App.js","reportWebVitals.js","reducers/doctorsReducer.jsx","reducers/nursesReducer.jsx","reducers/patientsReducer.jsx","reducers/userAdminsReducer.jsx","reducers/doctorReducer.jsx","reducers/nurseReducer.jsx","reducers/patientReducer.jsx","reducers/userAdminReducer.jsx","reducers/hospitalReducer.jsx","reducers/index.jsx","index.js"],"names":["Container","children","className","Navlinks","id","to","Navbar","GET_DOCTORS","GET_VIEWING_DOCTOR","SET_VIEWING_DOCTOR","UPDATE_DOCTOR","CREATE_DOCTOR","DELETE_DOCTOR","GET_PATIENTS","GET_VIEWING_PATIENT","SET_VIEWING_PATIENT","UPDATE_PATIENT","CREATE_PATIENT","DELETE_PATIENT","GET_NURSES","GET_VIEWING_NURSE","SET_VIEWING_NURSE","UPDATE_NURSE","CREATE_NURSE","DELETE_NURSE","GET_HOSPITAL","UPDATE_HOSPITAL","GET_USER_ADMINS","GET_VIEWING_USER_ADMIN","UPDATE_USER_ADMIN","CREATE_USER_ADMIN","DELETE_USER_ADMIN","PORT","sendWSMessage","port","message","callback","intPort","undefined","isNaN","Number","url","socket","WebSocket","addEventListener","event","send","myObject","JSON","parse","data","hasOwnProperty","err","console","log","onerror","onclose","wasClean","code","reason","doctorService","getDoctors","Promise","resolve","wsInterface","returnObject","msg","getDoctor","username","updateDoctor","updatedDoctor","stringify","deleteDoctor","createDoctor","newDoctor","dispatch","a","doctors","getDoctorsSuccess","toastr","error","type","payload","DoctorsOverview","useSelector","useDispatch","useEffect","length","nurseService","getNurses","getNurse","updateNurse","updatedNurse","deleteNurse","createNurse","newNurse","nurses","getNursesSuccess","NursesOverview","patientService","getPatients","getPatient","updatePatient","updatedPatient","deletePatient","createPatient","newPatient","patients","getPatientsSuccess","PatientsOverview","Home","getDoctorSuccess","doctor","updateDoctorSuccess","deleteDoctorSuccess","createDoctorSuccess","FormGroupInput","groupType","label","fieldType","pattern","minLen","typeOfForm","validate","required","useFormContext","register","errors","Form","Group","as","Row","controlId","Label","column","sm","Col","Control","name","placeholder","ref","minLength","value","FormGroupButton","func","variant","span","offset","Button","FormGroupDropdown","options","setState","custom","onChange","target","UpdateDoctor","methods","useForm","hospital","departments","useParams","history","useHistory","setValue","email","note","department","onSubmit","handleSubmit","push","Doctor","viewingDoctor","onDeleteDoctorClick","UpdateDoctorForm","onClick","getNurseSuccess","nurse","updateNurseSuccess","deleteNurseSuccess","createNurseSuccess","UpdateNurse","Nurse","viewingNurse","onDeleteNurseClick","UpdateNurseForm","getViewingPatient","patient","getPatientSuccess","updatePatientSuccess","deletePatientSuccess","createPatientSuccess","UpdatePatient","doctor_id","map","doc","Patient","viewingPatient","UpdatePatientForm","DoctorDetails","size","DoctorsList","useState","doctorState","setDoctorState","d","role","NurseDetails","NursesList","nurseState","setNurseState","PatientDetails","PatientList","patientState","setPatientState","CreateDoctor","split","CreateNurse","CreatePatient","NotFound","exact","App","path","component","PatientsList","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","doctorsReducer","state","action","nursesReducer","patientsReducer","userAdminsReducer","doctorReducer","deleted","nurseReducer","userAdminReducer","hospitalReducer","combineReducers","userAdmin","userAdmins","ReactDOM","render","StrictMode","store","createStore","reducers","composeWithDevTools","applyMiddleware","thunk","document","getElementById"],"mappings":"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","file":"static/js/main.e3eaf9ae.chunk.js","sourcesContent":["import React from 'react'\n\nconst Container = ({ children }) => <div className='container'> {children} </div>\n\nexport default Container","import { NavLink } from 'react-router-dom'\n\n\nconst Navlinks = () => (\n  <div className='collapse navbar-collapse' id='navbar-nav'>\n    <ul className='navbar-nav'>\n      <li className='nav-item'>\n        <NavLink to='/' className='nav-link'>Home</NavLink>\n      </li>\n      <li className='nav-item'>\n        <NavLink to='/doctors' className='nav-link'>Doctors</NavLink>\n      </li>\n      <li className='nav-item'> \n        <NavLink to='/patients' className='nav-link'>Patients</NavLink>\n      </li>\n      <li className='nav-item'>\n        <NavLink to='/nurses' className='nav-link'>Nurses</NavLink>\n      </li>\n    </ul>\n  </div>\n)\n\nexport default Navlinks","import Navlinks from '../Navlinks'\n\nconst Navbar = () => (\n  <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n    <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n      <Navlinks />\n    </div>\n  </nav>\n)\n\nexport default Navbar","// doctor\nexport const GET_DOCTORS = 'GET_DOCTORS'\nexport const GET_DOCTOR = 'GET_DOCTOR'\nexport const GET_VIEWING_DOCTOR = 'GET_VIEWING_DOCTOR'\nexport const SET_VIEWING_DOCTOR = 'SET_VIEWING_DOCTOR'\nexport const UPDATE_DOCTOR = 'UPDATE_DOCTOR'\nexport const CREATE_DOCTOR = 'CREATE_DOCTOR'\nexport const DELETE_DOCTOR = 'DELETE_DOCTOR'\n// patient\nexport const GET_PATIENTS = 'GET_PATIENTS'\nexport const GET_PATIENT = 'GET_PATIENT'\nexport const GET_VIEWING_PATIENT = 'GET_VIEWING_PATIENT'\nexport const SET_VIEWING_PATIENT = 'SET_VIEWING_PATIENT'\nexport const UPDATE_PATIENT = 'UPDATE_PATIENT'\nexport const CREATE_PATIENT = 'CREATE_PATIENT'\nexport const DELETE_PATIENT = 'DELETE_PATIENT'\n// nurse\nexport const GET_NURSES = 'GET_NURSES'\nexport const GET_NURSE = 'GET_NURSE'\nexport const GET_VIEWING_NURSE = 'GET_VIEWING_NURSE'\nexport const SET_VIEWING_NURSE = 'SET_VIEWING_NURSE'\nexport const UPDATE_NURSE = 'UPDATE_NURSE'\nexport const CREATE_NURSE = 'CREATE_NURSE'\nexport const DELETE_NURSE = 'DELETE_NURSE'\n// pharmacist\nexport const GET_PHARMACISTS = 'GET_PHARMACISTS'\nexport const GET_PHARMACIST = 'GET_PHARMACIST'\nexport const UPDATE_PHARMACIST = 'UPDATE_PHARMACIST'\nexport const DELETE_PHARMACIST = 'DELETE_PHARMACIST'\n// pharmacy\nexport const GET_PHARMACY = 'GET_PHARMACY'\n// hospital\nexport const GET_HOSPITAL = 'GET_HOSPITAL'\nexport const UPDATE_HOSPITAL = 'UPDATE_HOSPITAL'\n// userAdmin\nexport const GET_USER_ADMINS = 'GET_USER_ADMINS'\nexport const GET_USER_ADMIN = 'GET_USER_ADMIN'\nexport const GET_VIEWING_USER_ADMIN = 'GET_VIEWING_USER_ADMIN'\nexport const SET_VIEWING_USER_ADMIN = 'SET_VIEWING_USER_ADMIN'\nexport const UPDATE_USER_ADMIN = 'UPDATE_USER_ADMIN'\nexport const CREATE_USER_ADMIN = 'CREATE_USER_ADMIN'\nexport const DELETE_USER_ADMIN = 'DELETE_USER_ADMIN'\n// port\nexport const PORT = 8888","// Copied from Grischas Repository\nexport function sendWSMessage(port, message, callback) {\n\tlet intPort = port;\n\tif (port === undefined || isNaN(port) || Number(port) < 1024) {\n\t\tintPort = 8888;\n\t}\n\n\tlet url = 'ws://localhost:' + Number(intPort);\n\tconst socket = new WebSocket(url);\n\t// Connection opened\n\tsocket.addEventListener('open', function (event) {\n\t\tsocket.send(message);\n\t});\n\n\t// Listen for messages\n\tsocket.addEventListener('message', function (event) {\n\t\ttry {\n\t\t\tvar myObject = JSON.parse(event.data)\n\t\t\tif (!myObject.hasOwnProperty('msg')) {\n\t\t\t\tcallback(\"Return parameter needs to have a property 'msg' that contains the returned objects.\");\n\t\t\t} else {\n\t\t\t\tcallback(myObject);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t\tcallback(\"WebSocket parsing error. Is your return value valid JSON?\");\n\t\t}\n\t});\n\n\tsocket.onerror = function (event) {\n\t\tconsole.log('[error] WebSocket error', event);\n\t\tcallback(\"WebSocket connection error.\");\n\t};\n\n\tsocket.onclose = function (event) {\n\t\tif (event.wasClean) {\n\t\t\tconsole.log(`[close] Connection closed cleanly, code=${event.code} reason=${event.reason}`);\n\t\t} else {\n\t\t\tconsole.log('[close] Connection died');\n\t\t}\n\t};\n}\n","import * as wsInterface from '../webSocketInterface';\n\nconst doctorService = () => {\n  return {\n    getDoctors: (port) => {\n      return new Promise(resolve => wsInterface.sendWSMessage(\n        port, '{\"op\":\"readAll_doctor\", \"data\": {}}',\n        function (returnObject) {\n          resolve(returnObject.msg)\n        }))\n    },\n    getDoctor: (port, username) => {\n      return new Promise(resolve => wsInterface.sendWSMessage(\n        port, '{\"op\":\"read_doctor\", \"data\": {\"username\": \"' + username + '\"}}',\n        function (returnObject) {\n          resolve(returnObject.msg)\n        }))\n    },\n    updateDoctor: (port, username, updatedDoctor) => {\n      let data = updatedDoctor;\n      data.username = username;\n      return new Promise(resolve => wsInterface.sendWSMessage(\n        port, '{\"op\":\"update_doctor\", \"data\": ' + JSON.stringify(updatedDoctor) + '}',\n        function (returnObject) {\n          resolve(returnObject)\n        }))\n    },\n    deleteDoctor: (port, username) => {\n      return new Promise(resolve => wsInterface.sendWSMessage(\n        port, '{\"op\":\"delete_doctor\", \"data\": {\"username\": \"' + username + '\"}}',\n        function (returnObject) {\n          resolve(returnObject)\n        }))\n    },\n    createDoctor: (port, newDoctor) => {\n      return new Promise(resolve => wsInterface.sendWSMessage(\n        port, '{\"op\":\"create_doctor\", \"data\": ' + JSON.stringify(newDoctor) + '}',\n        function (returnObject) {\n          resolve(returnObject)\n        }))\n    }\n  }\n}\n\nexport default doctorService()","import { GET_DOCTORS } from '../constants'\nimport doctorService from '../services/doctorService'\nimport toastr from 'toastr'\n\nexport const getDoctors = () => async (dispatch) => {\n  try {\n    const doctors = await doctorService.getDoctors()\n    dispatch(getDoctorsSuccess(doctors))\n  } catch (err) {\n    toastr.error('Bad request, please try loading again.')\n  }\n}\n\nconst getDoctorsSuccess = (doctors) => ({\n  type: GET_DOCTORS,\n  payload: doctors\n})\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getDoctors } from '../../actions/doctorsActions'\nimport { PORT } from '../../constants'\n\nconst DoctorsOverview = () => {\n\n  const doctors = useSelector(({ doctors }) => doctors)\n\n  const dispatch = useDispatch()\n  useEffect(() => {\n    dispatch(getDoctors(PORT))\n  }, [])\n  return (\n    <div>\n      {`There are ${doctors.length} doctors!`}\n    </div>\n  )\n}\n\nexport default DoctorsOverview","import * as wsInterface from '../webSocketInterface';\n\nconst nurseService = () => {\n  return {\n    getNurses: (port) => {\n      return new Promise(resolve => wsInterface.sendWSMessage(port, '{\"op\":\"readAll_nurse\", \"data\": {}}', function (returnObject) {\n        resolve(returnObject.msg)\n      }));\n    },\n    getNurse: (port, username) => {\n      return new Promise(resolve => wsInterface.sendWSMessage(\n        port, '{\"op\":\"read_nurse\", \"data\": {\"username\": \"' + username + '\"}}',\n        function (returnObject) {\n          resolve(returnObject.msg)\n        }))\n    },\n    updateNurse: (port, username, updatedNurse) => {\n      let data = updatedNurse;\n      data.username = username;\n      return new Promise(resolve => wsInterface.sendWSMessage(\n        port, '{\"op\":\"update_nurse\", \"data\": ' + JSON.stringify(updatedNurse) + '}',\n        function (returnObject) {\n          resolve(returnObject)\n        }))\n    },\n    deleteNurse: (port, username) => {\n      return new Promise(resolve => wsInterface.sendWSMessage(\n        port, '{\"op\":\"delete_nurse\", \"data\": {\"username\": \"' + username + '\"}}',\n        function (returnObject) {\n          resolve(returnObject)\n        }))\n    },\n    createNurse: (port, newNurse) => {\n      return new Promise(resolve => wsInterface.sendWSMessage(\n        port, '{\"op\":\"create_nurse\", \"data\": ' + JSON.stringify(newNurse) + '}',\n        function (returnObject) {\n          resolve(returnObject)\n        }))\n    }\n  }\n}\n\nexport default nurseService()","import { GET_NURSES } from '../constants'\nimport nurseService from '../services/nurseService'\nimport toastr from 'toastr'\n\nexport const getNurses = () => async (dispatch) => {\n  try {\n    const nurses = await nurseService.getNurses()\n    dispatch(getNursesSuccess(nurses))\n  } catch (err) {\n    toastr.error('Bad request, please try loading again.')\n  }\n}\n\nconst getNursesSuccess = (nurses) => ({\n  type: GET_NURSES,\n  payload: nurses\n})\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getNurses } from '../../actions/nursesActions'\nimport { PORT } from '../../constants'\n\nconst NursesOverview = () => {\n  const nurses = useSelector(({ nurses }) => nurses)\n\n  const dispatch = useDispatch()\n  useEffect(() => {\n    dispatch(getNurses(PORT))\n  }, [])\n  return (\n    <div>\n      {`There are ${nurses.length} nurses!`}\n    </div>\n  )\n}\n  \n  export default NursesOverview","import * as wsInterface from '../webSocketInterface';\n\nconst patientService = () => {\n  return {\n    getPatients: (port) => {\n      return new Promise(resolve => wsInterface.sendWSMessage(port, '{\"op\":\"readAll_patient\", \"data\": {}}', function (returnObject) {\n        resolve(returnObject.msg)\n      }));\n    },\n    getPatient: (port, username) => {\n      return new Promise(resolve => wsInterface.sendWSMessage(\n        port, '{\"op\":\"read_patient\", \"data\": {\"username\": \"' + username + '\"}}',\n        function (returnObject) {\n          resolve(returnObject.msg)\n        }))\n    },\n    updatePatient: (port, username, updatedPatient) => {\n      let data = updatedPatient;\n      data.username = username;\n      return new Promise(resolve => wsInterface.sendWSMessage(\n        port, '{\"op\":\"update_patient\", \"data\":' + JSON.stringify(data) + '}',\n        function (returnObject) {\n          resolve(returnObject)\n        }))\n    },\n    deletePatient: (port, username) => {\n      return new Promise(resolve => wsInterface.sendWSMessage(\n        port, '{\"op\":\"delete_patient\", \"data\": {\"username\": \"' + username + '\"}}',\n        function (returnObject) {\n          resolve(returnObject)\n        }))\n    },\n    createPatient: (port, newPatient) => {\n      return new Promise(resolve => wsInterface.sendWSMessage(\n        port, '{\"op\":\"create_patient\", \"data\": ' + JSON.stringify(newPatient) + '}',\n        function (returnObject) {\n          resolve(returnObject)\n        }))\n    }\n  }\n}\n\nexport default patientService()","import { GET_PATIENTS } from '../constants'\nimport patientService from '../services/patientService'\nimport toastr from 'toastr'\n\nexport const getPatients = () => async (dispatch) => {\n  try {\n    const patients = await patientService.getPatients()\n    dispatch(getPatientsSuccess(patients))\n  } catch (err) {\n    toastr.error('Bad request, please try loading again.')\n  }\n}\n\nconst getPatientsSuccess = (patients) => ({\n  type: GET_PATIENTS,\n  payload: patients\n})\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getPatients } from '../../actions/patientsActions'\nimport { PORT } from '../../constants'\n\nconst PatientsOverview = () => {\n  const patients = useSelector(({ patients }) => patients)\n  const dispatch = useDispatch()\n  useEffect(() => {\n    dispatch(getPatients(PORT))\n  }, [])\n  return (\n    <div>\n      {`There are ${patients.length} patients!`}\n    </div>\n  )\n}\n  \n  export default PatientsOverview","import React from 'react'\nimport DoctorsOverview from '../../components/DoctorsOverview'\nimport NursesOverview from '../../components/NursesOverview'\nimport PatientsOverview from '../../components/PatientsOverview'\n// import HospitalOverview from '../../components/HospitalOverview'\n\nconst Home = () => {\n  return (\n    <div className='homepage'>\n      <div>\n        <h1>General Overview</h1>\n        <div className=\"row\">\n          <div className=\"col col-md me-md-1 py-3 my-3 shadow border rounded-1\">\n            <DoctorsOverview></DoctorsOverview>\n          </div>\n          <div className=\"col col-md ms-md-4 py-3 my-3 shadow border rounded-1\">\n            <NursesOverview></NursesOverview>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col col-md me-md-1 py-3 my-3 shadow border rounded-1\">\n            <PatientsOverview></PatientsOverview>\n          </div>\n          {/* <div className=\"col col-md ms-md-4 py-3 my-3 shadow border rounded-1\">\n            <HospitalOverview></HospitalOverview>\n          </div> */}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Home","import {\n  UPDATE_DOCTOR,\n  DELETE_DOCTOR,\n  GET_VIEWING_DOCTOR,\n  SET_VIEWING_DOCTOR,\n  CREATE_DOCTOR\n} from '../constants'\nimport doctorService from '../services/doctorService'\nimport toastr from 'toastr'\n\nexport const getViewingDoctor = (port, username) => async (dispatch) => {\n  try {\n    const doctor = await doctorService.getDoctor(port, username)\n    dispatch(getDoctorSuccess(doctor))\n  } catch (err) {\n    toastr.error('Bad request, please try loading again.')\n  }\n}\n\nconst getDoctorSuccess = (doctor) => ({\n  type: GET_VIEWING_DOCTOR,\n  payload: doctor\n})\n\nexport const setViewingDoctor = (doctor) => ({\n  type: SET_VIEWING_DOCTOR,\n  payload: doctor\n})\n\nexport const updateDoctor = (port, username, newDoctor) => async (dispatch) => {\n  try {\n    const doctor = await doctorService.updateDoctor(port, username, newDoctor)\n    dispatch(updateDoctorSuccess(doctor))\n  } catch (err) {\n    toastr.error('Bad request, please try loading again.')\n  }\n}\n\nconst updateDoctorSuccess = (doctor) => ({\n  type: UPDATE_DOCTOR,\n  payload: doctor\n})\n\nexport const deleteDoctor = (port, username) => async (dispatch) => {\n  try {\n    const doctor = await doctorService.deleteDoctor(port, username)\n    dispatch(deleteDoctorSuccess(doctor))\n  } catch (err) {\n    toastr.error('Bad request, please try loading again.')\n  }\n}\n\nconst deleteDoctorSuccess = (doctor) => ({\n  type: DELETE_DOCTOR,\n  payload: doctor\n})\n\nexport const createDoctor = (port, newDoctor) => async (dispatch) => {\n  try {\n    const doctor = await doctorService.createDoctor(port, newDoctor)\n    dispatch(createDoctorSuccess(doctor))\n  } catch (err) {\n    toastr.error('Bad request, please try loading again.')\n  }\n}\n\nconst createDoctorSuccess = (newDoctor) => ({\n  type: CREATE_DOCTOR,\n  payload: newDoctor\n})\n\n","import React from 'react'\nimport Form from 'react-bootstrap/Form'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport { useFormContext } from 'react-hook-form'\n\n// Input for forms\nconst FormGroupInput = ({ groupType, label, fieldType, pattern, minLen, typeOfForm, validate, required }) => {\n  const { register, errors } = useFormContext()\n\n  return (\n    <Form.Group as={Row} controlId={`form${typeOfForm}${groupType}`}>\n      <Form.Label column sm={3}>\n        {label}:\n      </Form.Label>\n      <Col sm={8}>\n        {required !== 'false'\n          ? <Form.Control\n              name={groupType}\n              placeholder={`Enter new: ${label}`}\n              type={fieldType}\n              ref={register({\n                required: 'You must fill this!',\n                minLength: {\n                  value: minLen,\n                  message: `${label} It must be at least ${minLen} characters long.`\n                },\n                pattern: {\n                  value: pattern,\n                  message: `Vinsamlegast sláðu inn leyfilegt: ${label}.`\n                },\n                validate: validate\n              })}\n            />\n          : <Form.Control\n              name={groupType}\n              placeholder={`Enter: ${label}...`}\n              type={fieldType}\n              ref={register()}\n            />}\n      </Col>\n      <Col sm={4}>\n        {errors[groupType] && <p>{errors[groupType].message}</p>}\n      </Col>\n    </Form.Group>\n  )\n}\n\n\nexport default FormGroupInput","import React from 'react'\nimport Form from 'react-bootstrap/Form'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport Button from 'react-bootstrap/Button'\n\n\nconst FormGroupButton = ({ label, typeOfForm, func, variant='dark' }) => {\n    return (\n        <Form.Group as={Row} controlId={`form${typeOfForm}Button`}>\n            <Col sm={{ span: 1, offset: 6 }}>\n                <Button type='submit' variant={variant}>\n                    {label}\n                </Button>\n            </Col>\n        </Form.Group>\n    )\n}\n\nexport default FormGroupButton","import React from 'react'\nimport Form from 'react-bootstrap/Form'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport { useFormContext } from 'react-hook-form'\n\n// Dropdown for forms\nconst FormGroupDropdown = ({ groupType, label, options, typeOfForm, setState }) => {\n  const { register } = useFormContext()\n\n  return (\n    <Form.Group as={Row} controlId={`form${typeOfForm}${groupType}`}>\n      <Form.Label column sm={3}>\n        {label}:\n      </Form.Label>\n      <Col sm={8}>\n        <Form.Control\n          as='select'\n          custom\n          name={groupType}\n          ref={register}\n          onChange={event => { setState(event.target.value) }}\n        >\n          {options}\n        </Form.Control>\n      </Col>\n    </Form.Group>\n  )\n}\n\nexport default FormGroupDropdown","import React, { useEffect } from 'react'\nimport { useHistory, useParams } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { updateDoctor } from '../../actions/doctorActions'\n// form imports\nimport Form from 'react-bootstrap/Form'\nimport FormGroupInput from '../FormGroupInput'\nimport FormGroupButton from '../FormGroupButton'\nimport FormGroupDropdown from '../FormGroupDropdown'\nimport { useForm, FormProvider } from 'react-hook-form'\nimport { PORT } from '../../constants'\nimport '../../styles/index.css'\n\nconst UpdateDoctor = ({ doctor }) => {\n  const dispatch = useDispatch()\n  const methods = useForm()\n  const hospital = useSelector(({ hospital }) => hospital)\n  const { departments } = hospital\n  const { id } = useParams()\n  const history = useHistory()\n\n\n  useEffect(() => {\n    methods.setValue('name', doctor?.name)\n    methods.setValue('email', doctor?.email)\n    methods.setValue('note', doctor?.note)\n    methods.setValue('department', doctor?.department)\n    // eslint-disable-next-line\n  }, [doctor])\n\n\n  const submitForm = (data) => {\n    const newDoctor = {\n      ...doctor,\n      department: data.department === '' ? \"Unassigned\" : data.department,\n      name: data.name === '' ? null : data.name,\n      email: data.email === '' ? null : data.email,\n      note: data.note === '' ? null : data.note\n    }\n    dispatch(updateDoctor(PORT, id, newDoctor))\n    history.push('/doctors')\n  }\n\n  return (\n    <div className='my-2'>\n      <FormProvider {...methods}>\n        <Form onSubmit={methods.handleSubmit(submitForm)} className='form form-horizontal'>\n          <div className='my-2'>\n            <FormGroupInput\n              groupType='name'\n              label='Name'\n              fieldType='text'\n              typeOfForm='UpdateDoctor'\n              required='false'\n            />\n          </div>\n          <div>\n            <FormGroupInput\n              groupType='email'\n              label='Email'\n              fieldType='text'\n              typeOfForm='UpdateDoctor'\n              required='false'\n            />\n          </div>\n          <div className='my-2'>\n            <FormGroupInput\n              groupType='note'\n              label='Note'\n              fieldType='text'\n              typeOfForm='UpdateDoctor'\n              required='false'\n            />\n          </div>\n          <div className='my-2'>\n            <FormGroupInput\n              groupType='department'\n              label='Department'\n              fieldType='text'\n              typeOfForm='UpdateDoctor'\n              required='false'\n            />\n          </div>\n          <div className='my-2 col-md-6'>\n            <FormGroupButton\n              label='Update'\n              typeOfForm='UpdateDoctor'\n              variant=\"primary\"\n            />\n          </div>\n        </Form>\n      </FormProvider>\n    </div>\n  )\n}\n\nexport default UpdateDoctor","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useParams, Link } from 'react-router-dom'\nimport { getViewingDoctor, deleteDoctor } from '../../actions/doctorActions'\nimport UpdateDoctorForm from '../../components/UpdateDoctorForm'\nimport { PORT } from '../../constants'\n\n// Get user and send to update form\nconst Doctor = () => {\n  const { id } = useParams()\n  const viewingDoctor = useSelector(({ doctor }) => doctor)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n      dispatch(getViewingDoctor(PORT, id))\n    // eslint-disable-next-line\n  }, [id])\n\n  const onDeleteDoctorClick = () => {\n    dispatch(deleteDoctor(PORT, id))\n  }\n\n  return (\n    <div className=\"row\">\n      <div className=\"\">\n        <UpdateDoctorForm doctor={viewingDoctor} />\n      </div>\n      <div className=\"row p-4 m-4\">\n      <Link to={\"/doctors\"}><button className=\"btn btn-outline-danger\" onClick={() => onDeleteDoctorClick()}>Delete Doctor</button></Link>\n      </div>\n    </div>\n  )\n}\n\nexport default Doctor","import {\n  GET_VIEWING_NURSE,\n  SET_VIEWING_NURSE,\n  UPDATE_NURSE,\n  DELETE_NURSE,\n  CREATE_NURSE\n} from '../constants'\nimport nurseService from '../services/nurseService'\nimport toastr from 'toastr'\n\nexport const getViewingNurse = (port, username) => async (dispatch) => {\n  try {\n    const nurse = await nurseService.getNurse(port, username)\n    dispatch(getNurseSuccess(nurse))\n  } catch (err) {\n    toastr.error('Bad request, please try loading again.')\n  }\n}\n\nconst getNurseSuccess = (nurse) => ({\n  type: GET_VIEWING_NURSE,\n  payload: nurse\n})\n\nexport const updateNurse = (port, username, newNurse) => async (dispatch) => {\n  try {\n    const nurse = await nurseService.updateNurse(port, username, newNurse)\n    dispatch(updateNurseSuccess(nurse))\n  } catch (err) {\n    toastr.error('Bad request, please try loading again.')\n  }\n}\n\nconst updateNurseSuccess = (nurse) => ({\n  type: UPDATE_NURSE,\n  payload: nurse\n})\n\nexport const setViewingNurse = (nurse) => ({\n  type: SET_VIEWING_NURSE,\n  payload: nurse\n})\n\nexport const deleteNurse = (port, username) => async (dispatch) => {\n  try {\n    const nurse = await nurseService.deleteNurse(port, username)\n    dispatch(deleteNurseSuccess(nurse))\n  } catch (err) {\n    toastr.error('Bad request, please try loading again.')\n  }\n}\n\nconst deleteNurseSuccess = (nurse) => ({\n  type: DELETE_NURSE,\n  payload: nurse\n})\n\n\nexport const createNurse = (port, newNurse) => async (dispatch) => {\n  try {\n    const nurse = await nurseService.createNurse(port, newNurse)\n    dispatch(createNurseSuccess(nurse))\n  } catch (err) {\n    toastr.error('Bad request, please try loading again.')\n  }\n}\n\nconst createNurseSuccess = (newNurse) => ({\n  type: CREATE_NURSE,\n  payload: newNurse\n})\n","import React, { useEffect } from 'react'\nimport { useHistory, useParams } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport { updateNurse } from '../../actions/nurseActions'\nimport { PORT } from '../../constants'\n// form imports\nimport Form from 'react-bootstrap/Form'\nimport FormGroupInput from '../FormGroupInput'\nimport FormGroupButton from '../FormGroupButton'\nimport { useForm, FormProvider } from 'react-hook-form'\n\nconst UpdateNurse = ({ nurse }) => {\n  const dispatch = useDispatch()\n  const methods = useForm()\n\n  const { id } = useParams()\n  const history = useHistory()\n\n\n  useEffect(() => {\n    methods.setValue('name', nurse?.name)\n    methods.setValue('email', nurse?.email)\n    methods.setValue('note', nurse?.note)\n    // eslint-disable-next-line\n  }, [nurse])\n\n\n  const submitForm = (data) => {\n    const newNurse = {\n      ...nurse,\n      name: data.name === '' ? null : data.name,\n      email: data.email === '' ? null : data.email,\n      note: data.note === '' ? null : data.note\n    }\n    dispatch(updateNurse(PORT, id, newNurse))\n    history.push('/nurses')\n  }\n\n  return (\n    <div className='my-2'>\n      <FormProvider {...methods}>\n        <Form onSubmit={methods.handleSubmit(submitForm)} className='form form-horizontal'>\n          <div className='my-2'>\n            <FormGroupInput\n              groupType='name'\n              label='Name'\n              fieldType='text'\n              typeOfForm='UpdateNurse'\n              required='false'\n            />\n          </div>\n          <div>\n            <FormGroupInput\n              groupType='email'\n              label='Email'\n              fieldType='text'\n              typeOfForm='UpdateNurse'\n              required='false'\n            />\n          </div>\n          <div className='my-2'>\n            <FormGroupInput\n              groupType='note'\n              label='Note'\n              fieldType='text'\n              typeOfForm='UpdateNurse'\n              required='false'\n            />\n          </div>\n          <div className='my-2 col-md-6'>\n            <FormGroupButton\n              label='Update'\n              typeOfForm='UpdateNurse'\n              variant='primary'\n            />\n          </div>\n        </Form>\n      </FormProvider>\n    </div>\n  )\n}\n\nexport default UpdateNurse","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useParams, Link } from 'react-router-dom'\nimport { getViewingNurse, deleteNurse } from '../../actions/nurseActions'\nimport UpdateNurseForm from '../../components/UpdateNurseForm'\nimport { PORT } from '../../constants'\n\n// Get user and send to update form\nconst Nurse = () => {\n  const { id } = useParams()\n  const viewingNurse = useSelector(({ nurse }) => nurse)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n      dispatch(getViewingNurse(PORT, id))\n    // eslint-disable-next-line\n  }, [id])\n\n  const onDeleteNurseClick = () => {\n    dispatch(deleteNurse(PORT, id))\n  }\n\n  return (\n    <div className=\"row\">\n      <div className=\"\">\n        <UpdateNurseForm nurse={viewingNurse} />\n        </div>\n        <div className=\"row p-4 m-4\">\n        <Link to={\"/nurses\"}><button className=\"btn btn-outline-danger\" onClick={() => onDeleteNurseClick()}>Delete Nurse</button></Link>\n        </div>\n      </div>\n      )\n}\n\n      export default Nurse","import {\n  GET_VIEWING_PATIENT,\n  SET_VIEWING_PATIENT,\n  UPDATE_PATIENT,\n  DELETE_PATIENT,\n  CREATE_PATIENT\n} from '../constants'\nimport patientService from '../services/patientService'\nimport toastr from 'toastr'\n\nexport const getViewingPatient = (port, username) => async (dispatch) => {\n  try {\n    const patient = await patientService.getPatient(port, username)\n    dispatch(getPatientSuccess(patient))\n  } catch (err) {\n    toastr.error('Bad request, please try loading again.')\n  }\n}\n\nconst getPatientSuccess = (patient) => ({\n  type: GET_VIEWING_PATIENT,\n  payload: patient\n})\n\nexport const setViewingPatient = (patient) => ({\n  type: SET_VIEWING_PATIENT,\n  payload: patient\n})\n\nexport const updatePatient = (port, username, newPatient) => async (dispatch) => {\n  try {\n    const patient = await patientService.updatePatient(port, username, newPatient)\n    dispatch(updatePatientSuccess(patient))\n  } catch (err) {\n    toastr.error('Bad request, please try loading again.')\n  }\n}\n\nconst updatePatientSuccess = (patient) => ({\n  type: UPDATE_PATIENT,\n  payload: patient\n})\n\nexport const deletePatient = (port, username) => async (dispatch) => {\n  try {\n    const patient = await patientService.deletePatient(port, username)\n    dispatch(deletePatientSuccess(patient))\n  } catch (err) {\n    toastr.error('Bad request, please try loading again.')\n  }\n}\n\nconst deletePatientSuccess = (patient) => ({\n  type: DELETE_PATIENT,\n  payload: patient\n})\n\nexport const createPatient = (port, newPatient) => async (dispatch) => {\n  try {\n    const patient = await patientService.createPatient(port, newPatient)\n    dispatch(createPatientSuccess(patient))\n  } catch (err) {\n    toastr.error('Bad request, please try loading again.')\n  }\n}\n\nconst createPatientSuccess = (newPatient) => ({\n  type: CREATE_PATIENT,\n  payload: newPatient\n})\n","import React, { useEffect } from 'react'\nimport { useHistory, useParams } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { updatePatient } from '../../actions/patientActions'\nimport { getDoctors } from '../../actions/doctorsActions'\nimport { PORT } from '../../constants'\n// form imports\nimport Form from 'react-bootstrap/Form'\nimport FormGroupInput from '../FormGroupInput'\nimport FormGroupButton from '../FormGroupButton'\nimport FormGroupDropdown from '../FormGroupDropdown'\nimport { useForm, FormProvider } from 'react-hook-form'\n\nconst UpdatePatient = ({ patient }) => {\n  const dispatch = useDispatch()\n  const methods = useForm()\n\n  const { id } = useParams()\n  const history = useHistory()\n\n  const doctors = useSelector(({ doctors }) => doctors)\n  useEffect(() => {\n    dispatch(getDoctors(PORT))\n    // eslint-disable-next-line\n  }, [])\n\n\n  useEffect(() => {\n    methods.setValue('name', patient?.name)\n    methods.setValue('email', patient?.email)\n    methods.setValue('note', patient?.note)\n    methods.setValue('doctor_id', patient?.doctor_id)\n    // eslint-disable-next-line\n  }, [patient])\n\n\n  const submitForm = (data) => {\n    const newPatient = {\n      ...patient,\n      name: data.name === '' ? null : data.name,\n      email: data.email === '' ? null : data.email,\n      note: data.note === '' ? null : data.note,\n      doctor_id: data.doctor_id === '' ? null : data.doctor_id\n    }\n    dispatch(updatePatient(PORT, id, newPatient))\n    history.push('/patients')\n  }\n\n  return (\n    <div className='my-2'>\n      <FormProvider {...methods}>\n        <Form onSubmit={methods.handleSubmit(submitForm)} className='form form-horizontal'>\n          <div className='my-2'>\n            <FormGroupInput\n              groupType='name'\n              label='Name'\n              fieldType='text'\n              typeOfForm='UpdatePatient'\n              required='false'\n            />\n          </div>\n          <div>\n            <FormGroupInput\n              groupType='email'\n              label='Email'\n              fieldType='text'\n              typeOfForm='UpdatePatient'\n              required='false'\n            />\n          </div>\n          <div className='my-2'>\n            <FormGroupInput\n              groupType='note'\n              label='Note'\n              fieldType='text'\n              typeOfForm='UpdatePatient'\n              required='false'\n            />\n          </div>\n          <div className='my-2'>\n            <FormGroupDropdown\n              groupType='doctor_id'\n              label='Doctor'\n              options={\n                <>\n                  {doctors.map(function (doc) {\n                    return (\n                      <option key={doc.username} value={doc.username}>{doc.username}</option>\n                    )\n                  })}\n                </>\n              }\n              typeOfForm='UpdatePatient'\n              setState={function() {}}\n            />\n          </div>\n\n          <div className=\"my-2 col-md-6\">\n            <FormGroupButton\n              label='Update'\n              typeOfForm='UpdatePatient'\n              variant='primary'\n            />\n          </div>\n        </Form>\n      </FormProvider>\n    </div>\n  )\n}\n\nexport default UpdatePatient","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useParams, Link } from 'react-router-dom'\nimport { getViewingPatient, deletePatient } from '../../actions/patientActions'\nimport UpdatePatientForm from '../../components/UpdatePatientForm'\nimport { PORT } from '../../constants'\n\n// Get user and send to update form\nconst Patient = () => {\n  const { id } = useParams()\n  const viewingPatient = useSelector(({ patient }) => patient)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(getViewingPatient(PORT, id))\n    // eslint-disable-next-line\n  }, [id])\n\n  const onDeletePatientClick = () => {\n    dispatch(deletePatient(PORT, id))\n  }\n\n  return (\n    <div className=\"row\">\n      <div className=\"\">\n        <UpdatePatientForm patient={viewingPatient} />\n      </div>\n      <div className=\"row p-4 m-4\">\n        <Link to={\"/patients\"}><button className=\"btn btn-outline-danger\" onClick={() => onDeletePatientClick()}>Delete Patient</button></Link>;\n      </div>\n    </div>\n  )\n}\n\nexport default Patient","import { BsPencilSquare } from 'react-icons/bs'\nimport { Link } from 'react-router-dom'\n\nconst DoctorDetails = ({ doctor }) => {\n  // const history = useHistory()\n\n  // const navigateToDoctor = (doctor) => {\n    // dispatch(setViewingDoctor(doctor))\n    // history.push({ params: doctor })\n  // }\n  return (\n    <tr key={doctor.username}>\n      <td>{doctor.username}</td>\n      <td>{doctor.name}</td>\n      <td>{doctor.email}</td>\n      <td>{doctor.department === null ? \"Unassigned\" : doctor.department}</td>\n      <td><Link to={`/doctors/${doctor.username}`}><BsPencilSquare size='1.5em' /></Link></td>\n    </tr>\n  )\n}\n\nexport default DoctorDetails","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport { getDoctors } from '../../actions/doctorsActions'\nimport DoctorDetails from '../../components/DoctorDetails'\nimport { PORT } from '../../constants'\n\nconst DoctorsList = () => {\n  const doctors = useSelector(({ doctors }) => doctors)\n  const [doctorState, setDoctorState] = useState([])\n  const dispatch = useDispatch()\n\n\n  useEffect(() => {\n    if (true) {\n      dispatch(getDoctors(PORT))\n    }\n    // eslint-disable-next-line\n  }, [])\n\n  useEffect(() => {\n    setDoctorState(doctors)\n  }, [doctors])\n\n  return (\n    <>\n      <div className='table'>\n        <table className='table table-bordered'>\n          <thead className='thead-dark'>\n            <tr>\n              <th>Username</th>\n              <th>Name</th>\n              <th>Email</th>\n              <th>Department</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              doctorState.length > 0\n                ? doctorState.map((d) => (\n                  <DoctorDetails key={d.username} doctor={d} />\n                ))\n                : null\n            }\n          </tbody>\n        </table>\n        {\n          doctors.length <= 0\n            ? <>\n              <div className='text-center'>\n                <div className='spinner-border' role='status'></div>\n                <div className='sr-only'>Loading...</div>\n              </div>\n            </>\n            : null\n        }\n      </div>\n      \n      <Link to={\"/doctors/create\"}><button className=\"btn btn-outline-primary text-left\">Create Doctor</button></Link>\n    </>\n  )\n}\n\nexport default DoctorsList","import { BsPencilSquare } from 'react-icons/bs'\nimport { Link } from 'react-router-dom'\n\nconst NurseDetails = ({ nurse }) => {\n\n  return (\n    <tr key={nurse.username}>\n      <td>{nurse.username}</td>\n      <td>{nurse.name}</td>\n      <td>{nurse.email}</td>\n      <td>{nurse.note}</td>\n      <td><Link to={`/nurses/${nurse.username}`}><BsPencilSquare size='1.5em' /></Link></td>\n    </tr>\n  )\n}\n\nexport default NurseDetails","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport { getNurses } from '../../actions/nursesActions'\nimport NurseDetails from '../../components/NurseDetails'\nimport { PORT } from '../../constants'\n\nconst NursesList = () => {\n  const nurses = useSelector(({ nurses }) => nurses)\n  const [nurseState, setNurseState] = useState([])\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    if (true) {\n      dispatch(getNurses(PORT))\n    }\n    // eslint-disable-next-line\n  }, [])\n\n  useEffect(() => {\n    setNurseState(nurses)\n  }, [nurses])\n\n  return (\n    <>\n    <div className='table'>\n      <table className='table table-bordered'>\n        <thead className='thead-dark'>\n          <tr>\n            <th>Username</th>\n            <th>Name</th>\n            <th>Email</th>\n            <th>Note</th>\n          </tr>\n        </thead>\n        <tbody>\n          {\n            nurseState.length > 0\n              ? nurseState.map((d) => (\n                <NurseDetails key={d.username} nurse={d} />\n              ))\n              : null\n          }\n        </tbody>\n      </table>\n      {\n        nurses.length <= 0\n          ? <>\n            <div className='text-center'>\n              <div className='spinner-border' role='status'></div>\n              <div className='sr-only'>Loading...</div>\n            </div>\n          </>\n          : null\n      }\n    </div>\n    <Link to={\"/nurses/create\"}><button className=\"btn btn-outline-primary text-left\">Create Nurse</button></Link>\n    </>\n  )\n}\n\nexport default NursesList","import { BsPencilSquare } from 'react-icons/bs'\nimport { Link } from 'react-router-dom'\n\nconst PatientDetails = ({ patient }) => {\n  return (\n    <tr key={patient.username}>\n      <td>{patient.username}</td>\n      <td>{patient.name}</td>\n      <td>{patient.email}</td>\n      <td>{patient.note}</td>\n      <td><Link to={`/patients/${patient.username}`}><BsPencilSquare size='1.5em' /></Link></td>\n    </tr>\n  )\n}\n\nexport default PatientDetails","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport { getPatients } from '../../actions/patientsActions'\nimport PatientDetails from '../../components/PatientDetails'\nimport { PORT } from '../../constants'\n\nconst PatientList = () => {\n  const patients = useSelector(({ patients }) => patients)\n  const [patientState, setPatientState] = useState([])\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    if (true) {\n      dispatch(getPatients(PORT))\n    }\n    // eslint-disable-next-line\n  }, [])\n\n  useEffect(() => {\n    setPatientState(patients)\n  }, [patients])\n\n  return (\n    <>\n    <div className='table'>\n      <table className='table table-bordered'>\n        <thead className='thead-dark'>\n          <tr>\n            <th>Username</th>\n            <th>Name</th>\n            <th>Email</th>\n            <th>Note</th>\n          </tr>\n        </thead>\n        <tbody>\n          {\n            patientState.length > 0\n              ? patientState.map((d) => (\n                <PatientDetails key={d.username} patient={d} />\n              ))\n              : null\n          }\n        </tbody>\n      </table>\n      {\n        patients.length <= 0\n          ? <>\n            <div className='text-center'>\n              <div className='spinner-border' role='status'></div>\n              <div className='sr-only'>Loading...</div>\n            </div>\n          </>\n          : null\n      }\n    </div>\n    <Link to={\"/patients/create\"}><button className=\"btn btn-outline-primary text-left\">Create Patient</button></Link>\n    </>\n  )\n}\n\nexport default PatientList","import React, { useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\nimport { createDoctor } from '../../actions/doctorActions'\n// form imports\nimport Form from 'react-bootstrap/Form'\nimport FormGroupInput from '../../components/FormGroupInput'\nimport FormGroupButton from '../../components/FormGroupButton'\nimport { useForm, FormProvider } from 'react-hook-form'\nimport { PORT } from '../../constants'\nimport '../../styles/index.css'\n\nconst CreateDoctor = () => {\n  const dispatch = useDispatch()\n  const methods = useForm()\n  const history = useHistory()\n\n\n  useEffect(() => {\n    // eslint-disable-next-line\n  }, [])\n\n\n  const submitForm = (data) => {\n    const newDoctor = {\n      department: data.department === '' ? \"Unassigned\" : data.department,\n      name: data.name === '' ? null : data.name,\n      note: data.note === '' ? null : data.note,\n      email: data.email === '' ? null : data.email,\n      username: data.username === '' ? \"defaultUsername\" : data.email.split(\"@\")[0],\n    }\n    dispatch(createDoctor(PORT, newDoctor))\n    history.push('/doctors')\n  }\n\n  return (\n    <div className='my-2'>\n      <h1 className='createNew'>Create Doctor</h1>\n      <FormProvider {...methods}>\n        <Form onSubmit={methods.handleSubmit(submitForm)} className='form form-horizontal'>\n          <div className='my-2'>\n            <FormGroupInput\n              groupType='name'\n              label='Name'\n              fieldType='text'\n              typeOfForm='CreateDoctor'\n              required='true'\n            />\n          </div>\n          <div className='my-2'>\n            <FormGroupInput\n              groupType='email'\n              label='Email'\n              fieldType='text'\n              typeOfForm='CreateDoctor'\n              required='true'\n            />\n          </div>\n          <div className='my-2'>\n            <FormGroupInput\n              groupType='note'\n              label='Note'\n              fieldType='text'\n              typeOfForm='CreateDoctor'\n              required='true'\n            />\n          </div>\n          <div className='mx-auto'>\n            <FormGroupButton\n              label='Save'\n              typeOfForm='CreateDoctor'\n              variant='primary'\n            />\n          </div>\n        </Form>\n      </FormProvider>\n    </div>\n  )\n}\n\nexport default CreateDoctor","import React, { useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\nimport { createNurse } from '../../actions/nurseActions'\n// form imports\nimport Form from 'react-bootstrap/Form'\nimport FormGroupInput from '../../components/FormGroupInput'\nimport FormGroupButton from '../../components/FormGroupButton'\nimport { useForm, FormProvider } from 'react-hook-form'\nimport { PORT } from '../../constants'\n\nconst CreateNurse = () => {\n  const dispatch = useDispatch()\n  const methods = useForm()\n  const history = useHistory()\n\n  useEffect(() => {\n    // eslint-disable-next-line\n  }, [])\n\n\n  const submitForm = (data) => {\n    const newNurse = {\n      name: data.name === '' ? null : data.name,\n      note: data.note === '' ? null : data.note,\n      email: data.email === '' ? null : data.email,\n      username: data.username === '' ? \"defaultUsername\" : data.email.split(\"@\")[0],\n    }\n    dispatch(createNurse(PORT, newNurse))\n    history.push('/nurses')\n  }\n\n  return (\n    <div className='my-2'>\n      <h1 className='createNew'>Create Nurse</h1>\n      <FormProvider {...methods}>\n        <Form onSubmit={methods.handleSubmit(submitForm)} className='form form-horizontal'>\n          <div className='my-2'>\n            <FormGroupInput\n              groupType='name'\n              label='Name'\n              fieldType='text'\n              typeOfForm='CreateNurse'\n              required='true'\n            />\n          </div>\n          <div className='my-2'>\n            <FormGroupInput\n              groupType='email'\n              label='Email'\n              fieldType='text'\n              typeOfForm='CreateNurse'\n              required='true'\n            />\n          </div>\n          <div className='my-2'>\n            <FormGroupInput\n              groupType='note'\n              label='Note'\n              fieldType='text'\n              typeOfForm='CreateNurse'\n              required='true'\n            />\n          </div>\n          <div className='mx-auto'>\n            <FormGroupButton\n              label='Save'\n              typeOfForm='CreateNurse'\n              variant='primary'\n            />\n          </div>\n        </Form>\n      </FormProvider>\n    </div>\n  )\n}\n\nexport default CreateNurse","import React, { useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\nimport { createPatient } from '../../actions/patientActions'\n// form imports\nimport Form from 'react-bootstrap/Form'\nimport FormGroupInput from '../../components/FormGroupInput'\nimport FormGroupButton from '../../components/FormGroupButton'\nimport { useForm, FormProvider } from 'react-hook-form'\nimport { PORT } from '../../constants'\n\nconst CreatePatient = () => {\n  const dispatch = useDispatch()\n  const methods = useForm()\n  const history = useHistory()\n\n\n  useEffect(() => {\n    // eslint-disable-next-line\n  }, [])\n\n\n  const submitForm = (data) => {\n    const newPatient = {\n      name: data.name === '' ? null : data.name,\n      note: data.note === '' ? null : data.note,\n      email: data.email === '' ? null : data.email,\n      username: data.username === '' ? \"defaultUsername\" : data.email.split(\"@\")[0],\n    }\n    dispatch(createPatient(PORT ,newPatient))\n    history.push('/patients')\n  }\n\n  return (\n    <div className='my-2'>\n      <h1 className='createNew'>Create Patient</h1>\n      <FormProvider {...methods}>\n        <Form onSubmit={methods.handleSubmit(submitForm)} className='form form-horizontal'>\n          <div className='my-2'>\n            <FormGroupInput\n              groupType='name'\n              label='Name'\n              fieldType='text'\n              typeOfForm='CreatePatient'\n              required='true'\n            />\n          </div>\n          <div className='my-2'>\n            <FormGroupInput\n              groupType='email'\n              label='Email'\n              fieldType='text'\n              typeOfForm='CreatePatient'\n              required='true'\n            />\n          </div>\n          <div className='my-2'>\n            <FormGroupInput\n              groupType='note'\n              label='Note'\n              fieldType='text'\n              typeOfForm='CreatePatient'\n              required='true'\n            />\n          </div>\n          <div className='mx-auto'>\n            <FormGroupButton\n              label='Save'\n              typeOfForm='CreatePatient'\n              variant='primary'\n            />\n          </div>\n        </Form>\n      </FormProvider>\n    </div>\n  )\n}\n\nexport default CreatePatient","import React from 'react'\nimport { NavLink } from 'react-router-dom'\n\nconst NotFound = () => {\n  return (\n    <div className='notfound'>\n      <h1>404 Not Found</h1>\n      <NavLink\n        exact\n        to='/'\n        className='navigation-link'\n      >Go back to Homepage\n      </NavLink>\n    </div>\n  )\n}\n\nexport default NotFound","import { useState } from 'react'\nimport { Route, Switch } from 'react-router-dom'\nimport Container from './components/Container'\nimport Navbar from './components/Navbar'\nimport Home from './views/Home'\nimport Doctor from './views/Doctor'\nimport Nurse from './views/Nurse'\nimport Patient from './views/Patient'\nimport DoctorsList from './views/DoctorsList'\nimport NursesList from './views/NursesList'\nimport PatientsList from './views/PatientsList'\nimport CreateDoctor from './views/CreateDoctor'\nimport CreateNurse from './views/CreateNurse'\nimport CreatePatient from './views/CreatePatient'\nimport NotFound from './views/NotFound'\nimport DebugMode from './views/DebugMode'\nimport LiveMode from './views/LiveMode'\n\nimport './styles/App.css'\n\nconst App = () => {\n  const [debug, setDebug] = useState(true)\n\n  const updateDebugMode = (state) => {\n    setDebug(state)\n  }\n\n  return (\n    <div className=\"App\">\n      {/* {debug === true ? <DebugMode triggerUpdate={updateDebugMode} />\n        :\n        <> */}\n        {/* <LiveMode triggerUpdate={updateDebugMode} /> */}\n          <Navbar />\n          <Container>\n            <Switch>\n              <Route exact path='/' component={Home} />\n              <Route exact path='/doctors' component={DoctorsList} />\n              <Route path='/doctors/create' component={CreateDoctor} />\n              <Route path='/doctors/:id' component={Doctor} />\n              <Route exact path='/patients' component={PatientsList} />\n              <Route exact path='/patients/create' component={CreatePatient} />\n              <Route path='/patients/:id' component={Patient} />\n              <Route exact path='/nurses' component={NursesList} />\n              <Route exact path='/nurses/create' component={CreateNurse} />\n              <Route path='/nurses/:id' component={Nurse} />\n              <Route path='*' component={NotFound} />\n            </Switch>\n          </Container>\n        {/* </> */}\n       {/* } */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { GET_DOCTORS } from '../constants'\n\nconst doctorsReducer = (state = [], action) => {\n  switch (action.type) {\n    case GET_DOCTORS: return action.payload\n    default: return state\n  }\n}\n\nexport default doctorsReducer","import { GET_NURSES } from '../constants'\n\nconst nursesReducer = (state = [], action) => {\n  switch (action.type) {\n    case GET_NURSES: return action.payload\n    default: return state\n  }\n}\n\nexport default nursesReducer","import { GET_PATIENTS } from '../constants'\n\nconst patientsReducer = (state = [], action) => {\n  switch (action.type) {\n    case GET_PATIENTS: return action.payload\n    default: return state\n  }\n}\n\nexport default patientsReducer","import { GET_USER_ADMINS } from '../constants'\n\nconst userAdminsReducer = (state = [], action) => {\n  switch (action.type) {\n    case GET_USER_ADMINS: return action.payload\n    default: return state\n  }\n}\n\nexport default userAdminsReducer","import {\n  GET_VIEWING_DOCTOR,\n  SET_VIEWING_DOCTOR,\n  CREATE_DOCTOR,\n  DELETE_DOCTOR,\n  UPDATE_DOCTOR\n} from '../constants'\n\nconst doctorReducer = (state = {msg: {}, deleted: false}, action) => {\n  switch (action.type) {\n    case GET_VIEWING_DOCTOR: return action.payload\n    case SET_VIEWING_DOCTOR: return action.payload\n    case CREATE_DOCTOR: return action.payload\n    case UPDATE_DOCTOR: return action.payload\n    case DELETE_DOCTOR: return action.payload\n    default: return state\n  }\n}\n\nexport default doctorReducer","import {\n    GET_VIEWING_NURSE,\n    SET_VIEWING_NURSE,\n    CREATE_NURSE,\n    DELETE_NURSE,\n    UPDATE_NURSE\n  } from '../constants'\n  \n  const nurseReducer = (state = {msg: {}, deleted: false}, action) => {\n    switch (action.type) {\n      case GET_VIEWING_NURSE: return action.payload\n      case SET_VIEWING_NURSE: return action.payload\n      case CREATE_NURSE: return action.payload\n      case UPDATE_NURSE: return action.payload\n      case DELETE_NURSE: return action.payload\n      default: return state\n    }\n  }\n  \n  export default nurseReducer","import {\n    GET_VIEWING_PATIENT,\n    SET_VIEWING_PATIENT,\n    CREATE_PATIENT,\n    DELETE_PATIENT,\n    UPDATE_PATIENT\n  } from '../constants'\n  \n  const nurseReducer = (state = {msg: {}, deleted: false}, action) => {\n    switch (action.type) {\n      case GET_VIEWING_PATIENT: return action.payload\n      case SET_VIEWING_PATIENT: return action.payload\n      case CREATE_PATIENT: return action.payload\n      case UPDATE_PATIENT: return action.payload\n      case DELETE_PATIENT: return action.payload\n      default: return state\n    }\n  }\n  \n  export default nurseReducer","import {\n    GET_VIEWING_USER_ADMIN,\n    CREATE_USER_ADMIN,\n    DELETE_USER_ADMIN,\n    UPDATE_USER_ADMIN\n  } from '../constants'\n  \n  const userAdminReducer = (state = {msg: {}, deleted: false}, action) => {\n    switch (action.type) {\n      case GET_VIEWING_USER_ADMIN: return action.payload\n      case CREATE_USER_ADMIN: return action.payload\n      case UPDATE_USER_ADMIN: return action.payload\n      case DELETE_USER_ADMIN: return action.payload\n      default: return state\n    }\n  }\n  \n  export default userAdminReducer","import {\n    GET_HOSPITAL,\n    UPDATE_HOSPITAL\n  } from '../constants'\n  \n  const hospitalReducer = (state = {msg: {}}, action) => {\n    switch (action.type) {\n      case GET_HOSPITAL: return action.payload\n      case UPDATE_HOSPITAL: return action.payload\n      default: return state\n    }\n  }\n  \n  export default hospitalReducer","import { combineReducers } from 'redux'\nimport doctors from './doctorsReducer'\nimport nurses from './nursesReducer'\nimport patients from './patientsReducer'\nimport userAdmins from './userAdminsReducer'\nimport doctor from './doctorReducer'\nimport nurse from './nurseReducer'\nimport patient from './patientReducer'\nimport userAdmin from './userAdminReducer'\nimport hospital from './hospitalReducer'\n\nexport default combineReducers({\n  doctor,\n  nurse,\n  patient,\n  userAdmin,\n  doctors,\n  patients,\n  nurses,\n  userAdmins,\n  hospital\n})","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './styles/index.css'\nimport reportWebVitals from './reportWebVitals'\nimport { HashRouter as Router } from 'react-router-dom'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport reducers from './reducers'\nimport thunk from 'redux-thunk'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'toastr/build/toastr.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={createStore(reducers, composeWithDevTools(applyMiddleware(thunk)))}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()"],"sourceRoot":""}