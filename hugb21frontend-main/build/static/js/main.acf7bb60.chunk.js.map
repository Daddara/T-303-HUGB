{"version":3,"sources":["components/Container/index.jsx","components/Navlinks/index.jsx","components/Navbar/index.jsx","constants/index.jsx","webSocketInterface.js","services/patientService.jsx","actions/patientsActions.jsx","components/PatientsOverview/index.jsx","views/Home/index.jsx","components/FormGroupInput/index.jsx","components/FormGroupButton/index.jsx","actions/patientActions.jsx","components/UpdatePatientForm/index.jsx","views/Patient/index.jsx","components/PatientDetails/index.jsx","views/PatientsList/index.jsx","views/CreatePatient/index.jsx","views/NotFound/index.jsx","App.js","reportWebVitals.js","reducers/doctorsReducer.jsx","reducers/nursesReducer.jsx","reducers/patientsReducer.jsx","reducers/userAdminsReducer.jsx","reducers/doctorReducer.jsx","reducers/nurseReducer.jsx","reducers/patientReducer.jsx","reducers/userAdminReducer.jsx","reducers/hospitalReducer.jsx","reducers/index.jsx","index.js"],"names":["Container","children","className","Navlinks","id","to","Navbar","GET_DOCTORS","GET_VIEWING_DOCTOR","SET_VIEWING_DOCTOR","UPDATE_DOCTOR","CREATE_DOCTOR","DELETE_DOCTOR","GET_PATIENTS","GET_VIEWING_PATIENT","SET_VIEWING_PATIENT","UPDATE_PATIENT","CREATE_PATIENT","DELETE_PATIENT","GET_NURSES","GET_VIEWING_NURSE","SET_VIEWING_NURSE","UPDATE_NURSE","CREATE_NURSE","DELETE_NURSE","GET_HOSPITAL","UPDATE_HOSPITAL","GET_USER_ADMINS","GET_VIEWING_USER_ADMIN","UPDATE_USER_ADMIN","CREATE_USER_ADMIN","DELETE_USER_ADMIN","PORT","sendWSMessage","port","message","callback","intPort","undefined","isNaN","Number","url","socket","WebSocket","addEventListener","event","send","myObject","JSON","parse","data","hasOwnProperty","err","console","log","onerror","onclose","wasClean","code","reason","patientService","getPatients","Promise","resolve","wsInterface","returnObject","msg","getPatient","username","updatePatient","updatedPatient","stringify","deletePatient","createPatient","newPatient","dispatch","a","patients","getPatientsSuccess","toastr","error","type","payload","PatientsOverview","useSelector","useDispatch","useEffect","length","Home","FormGroupInput","groupType","label","fieldType","pattern","minLen","typeOfForm","validate","required","useFormContext","register","errors","Form","Group","as","Row","controlId","Label","column","sm","Col","Control","name","placeholder","ref","minLength","value","FormGroupButton","func","variant","span","offset","Button","getViewingPatient","patient","getPatientSuccess","updatePatientSuccess","deletePatientSuccess","createPatientSuccess","UpdatePatient","methods","useForm","useParams","history","useHistory","setValue","email","note","onSubmit","handleSubmit","push","Patient","viewingPatient","UpdatePatientForm","onClick","PatientDetails","size","PatientList","useState","patientState","setPatientState","map","d","role","CreatePatient","split","NotFound","exact","App","path","component","PatientsList","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","doctorsReducer","state","action","nursesReducer","patientsReducer","userAdminsReducer","doctorReducer","deleted","nurseReducer","userAdminReducer","hospitalReducer","combineReducers","doctor","nurse","userAdmin","doctors","nurses","userAdmins","hospital","ReactDOM","render","StrictMode","store","createStore","reducers","composeWithDevTools","applyMiddleware","thunk","document","getElementById"],"mappings":"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","file":"static/js/main.acf7bb60.chunk.js","sourcesContent":["import React from 'react'\n\nconst Container = ({ children }) => <div className='container'> {children} </div>\n\nexport default Container","import { NavLink } from 'react-router-dom'\n\n\nconst Navlinks = () => (\n  <div className='collapse navbar-collapse' id='navbar-nav'>\n    <ul className='navbar-nav'>\n      <li className='nav-item'>\n        <NavLink to='/' className='nav-link'>Home</NavLink>\n      </li>\n      {/* <li className='nav-item'>\n        <NavLink to='/doctors' className='nav-link'>Doctors</NavLink>\n      </li> */}\n      <li className='nav-item'> \n        <NavLink to='/patients' className='nav-link'>Patients</NavLink>\n      </li>\n      {/* <li className='nav-item'>\n        <NavLink to='/nurses' className='nav-link'>Nurses</NavLink>\n      </li> */}\n    </ul>\n  </div>\n)\n\nexport default Navlinks","import Navlinks from '../Navlinks'\n\nconst Navbar = () => (\n  <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n    <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n      <Navlinks />\n    </div>\n  </nav>\n)\n\nexport default Navbar","// doctor\nexport const GET_DOCTORS = 'GET_DOCTORS'\nexport const GET_DOCTOR = 'GET_DOCTOR'\nexport const GET_VIEWING_DOCTOR = 'GET_VIEWING_DOCTOR'\nexport const SET_VIEWING_DOCTOR = 'SET_VIEWING_DOCTOR'\nexport const UPDATE_DOCTOR = 'UPDATE_DOCTOR'\nexport const CREATE_DOCTOR = 'CREATE_DOCTOR'\nexport const DELETE_DOCTOR = 'DELETE_DOCTOR'\n// patient\nexport const GET_PATIENTS = 'GET_PATIENTS'\nexport const GET_PATIENT = 'GET_PATIENT'\nexport const GET_VIEWING_PATIENT = 'GET_VIEWING_PATIENT'\nexport const SET_VIEWING_PATIENT = 'SET_VIEWING_PATIENT'\nexport const UPDATE_PATIENT = 'UPDATE_PATIENT'\nexport const CREATE_PATIENT = 'CREATE_PATIENT'\nexport const DELETE_PATIENT = 'DELETE_PATIENT'\n// nurse\nexport const GET_NURSES = 'GET_NURSES'\nexport const GET_NURSE = 'GET_NURSE'\nexport const GET_VIEWING_NURSE = 'GET_VIEWING_NURSE'\nexport const SET_VIEWING_NURSE = 'SET_VIEWING_NURSE'\nexport const UPDATE_NURSE = 'UPDATE_NURSE'\nexport const CREATE_NURSE = 'CREATE_NURSE'\nexport const DELETE_NURSE = 'DELETE_NURSE'\n// pharmacist\nexport const GET_PHARMACISTS = 'GET_PHARMACISTS'\nexport const GET_PHARMACIST = 'GET_PHARMACIST'\nexport const UPDATE_PHARMACIST = 'UPDATE_PHARMACIST'\nexport const DELETE_PHARMACIST = 'DELETE_PHARMACIST'\n// pharmacy\nexport const GET_PHARMACY = 'GET_PHARMACY'\n// hospital\nexport const GET_HOSPITAL = 'GET_HOSPITAL'\nexport const UPDATE_HOSPITAL = 'UPDATE_HOSPITAL'\n// userAdmin\nexport const GET_USER_ADMINS = 'GET_USER_ADMINS'\nexport const GET_USER_ADMIN = 'GET_USER_ADMIN'\nexport const GET_VIEWING_USER_ADMIN = 'GET_VIEWING_USER_ADMIN'\nexport const SET_VIEWING_USER_ADMIN = 'SET_VIEWING_USER_ADMIN'\nexport const UPDATE_USER_ADMIN = 'UPDATE_USER_ADMIN'\nexport const CREATE_USER_ADMIN = 'CREATE_USER_ADMIN'\nexport const DELETE_USER_ADMIN = 'DELETE_USER_ADMIN'\n// port\nexport const PORT = 8888","// Copied from Grischas Repository\nexport function sendWSMessage(port, message, callback) {\n\tlet intPort = port;\n\tif (port === undefined || isNaN(port) || Number(port) < 1024) {\n\t\tintPort = 8888;\n\t}\n\n\tlet url = 'ws://localhost:' + Number(intPort);\n\tconst socket = new WebSocket(url);\n\t// Connection opened\n\tsocket.addEventListener('open', function (event) {\n\t\tsocket.send(message);\n\t});\n\n\t// Listen for messages\n\tsocket.addEventListener('message', function (event) {\n\t\ttry {\n\t\t\tvar myObject = JSON.parse(event.data)\n\t\t\tif (!myObject.hasOwnProperty('msg')) {\n\t\t\t\tcallback(\"Return parameter needs to have a property 'msg' that contains the returned objects.\");\n\t\t\t} else {\n\t\t\t\tcallback(myObject);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t\tcallback(\"WebSocket parsing error. Is your return value valid JSON?\");\n\t\t}\n\t});\n\n\tsocket.onerror = function (event) {\n\t\tconsole.log('[error] WebSocket error', event);\n\t\tcallback(\"WebSocket connection error.\");\n\t};\n\n\tsocket.onclose = function (event) {\n\t\tif (event.wasClean) {\n\t\t\tconsole.log(`[close] Connection closed cleanly, code=${event.code} reason=${event.reason}`);\n\t\t} else {\n\t\t\tconsole.log('[close] Connection died');\n\t\t}\n\t};\n}\n","import * as wsInterface from '../webSocketInterface';\n\nconst patientService = () => {\n  return {\n    getPatients: (port) => {\n      return new Promise(resolve => wsInterface.sendWSMessage(port, '{\"op\":\"readAll_patient\", \"data\": {}}', function (returnObject) {\n        resolve(returnObject.msg)\n      }));\n    },\n    getPatient: (port, username) => {\n      return new Promise(resolve => wsInterface.sendWSMessage(\n        port, '{\"op\":\"read_patient\", \"data\": {\"username\": \"' + username + '\"}}',\n        function (returnObject) {\n          resolve(returnObject.msg)\n        }))\n    },\n    updatePatient: (port, username, updatedPatient) => {\n      let data = updatedPatient;\n      data.username = username;\n      return new Promise(resolve => wsInterface.sendWSMessage(\n        port, '{\"op\":\"update_patient\", \"data\":' + JSON.stringify(data) + '}',\n        function (returnObject) {\n          resolve(returnObject)\n        }))\n    },\n    deletePatient: (port, username) => {\n      return new Promise(resolve => wsInterface.sendWSMessage(\n        port, '{\"op\":\"delete_patient\", \"data\": {\"username\": \"' + username + '\"}}',\n        function (returnObject) {\n          resolve(returnObject)\n        }))\n    },\n    createPatient: (port, newPatient) => {\n      return new Promise(resolve => wsInterface.sendWSMessage(\n        port, '{\"op\":\"create_patient\", \"data\": ' + JSON.stringify(newPatient) + '}',\n        function (returnObject) {\n          resolve(returnObject)\n        }))\n    }\n  }\n}\n\nexport default patientService()","import { GET_PATIENTS } from '../constants'\nimport patientService from '../services/patientService'\nimport toastr from 'toastr'\n\nexport const getPatients = () => async (dispatch) => {\n  try {\n    const patients = await patientService.getPatients()\n    dispatch(getPatientsSuccess(patients))\n  } catch (err) {\n    toastr.error('Bad request, please try loading again.')\n  }\n}\n\nconst getPatientsSuccess = (patients) => ({\n  type: GET_PATIENTS,\n  payload: patients\n})\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getPatients } from '../../actions/patientsActions'\nimport { PORT } from '../../constants'\n\nconst PatientsOverview = () => {\n  const patients = useSelector(({ patients }) => patients)\n  const dispatch = useDispatch()\n  useEffect(() => {\n    dispatch(getPatients(PORT))\n  }, [])\n  return (\n    <div>\n      {`There are ${patients.length} patients!`}\n    </div>\n  )\n}\n  \n  export default PatientsOverview","import React from 'react'\n// import DoctorsOverview from '../../components/DoctorsOverview'\n// import NursesOverview from '../../components/NursesOverview'\nimport PatientsOverview from '../../components/PatientsOverview'\n// import HospitalOverview from '../../components/HospitalOverview'\n\nconst Home = () => {\n  return (\n    <div className='homepage'>\n      <div>\n        <h1>General Overview</h1>\n        <div className=\"row\">\n          {/* <div className=\"col col-md me-md-1 py-3 my-3 shadow border rounded-1\">\n            <DoctorsOverview></DoctorsOverview>\n          </div>  */}\n          {/* <div className=\"col col-md ms-md-4 py-3 my-3 shadow border rounded-1\">\n            <NursesOverview></NursesOverview>\n          </div> */}\n        </div>\n        <div className=\"row\">\n          <div className=\"col col-md me-md-1 py-3 my-3 shadow border rounded-1\">\n            <PatientsOverview></PatientsOverview>\n          </div>\n          {/* <div className=\"col col-md ms-md-4 py-3 my-3 shadow border rounded-1\">\n            <HospitalOverview></HospitalOverview>\n          </div> */}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Home","import React from 'react'\nimport Form from 'react-bootstrap/Form'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport { useFormContext } from 'react-hook-form'\n\n// Input for forms\nconst FormGroupInput = ({ groupType, label, fieldType, pattern, minLen, typeOfForm, validate, required }) => {\n  const { register, errors } = useFormContext()\n\n  return (\n    <Form.Group as={Row} controlId={`form${typeOfForm}${groupType}`}>\n      <Form.Label column sm={3}>\n        {label}:\n      </Form.Label>\n      <Col sm={8}>\n        {required !== 'false'\n          ? <Form.Control\n              name={groupType}\n              placeholder={`Enter new: ${label}`}\n              type={fieldType}\n              ref={register({\n                required: 'You must fill this!',\n                minLength: {\n                  value: minLen,\n                  message: `${label} It must be at least ${minLen} characters long.`\n                },\n                pattern: {\n                  value: pattern,\n                  message: `Vinsamlegast sláðu inn leyfilegt: ${label}.`\n                },\n                validate: validate\n              })}\n            />\n          : <Form.Control\n              name={groupType}\n              placeholder={`Enter: ${label}...`}\n              type={fieldType}\n              ref={register()}\n            />}\n      </Col>\n      <Col sm={4}>\n        {errors[groupType] && <p>{errors[groupType].message}</p>}\n      </Col>\n    </Form.Group>\n  )\n}\n\n\nexport default FormGroupInput","import React from 'react'\nimport Form from 'react-bootstrap/Form'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport Button from 'react-bootstrap/Button'\n\n\nconst FormGroupButton = ({ label, typeOfForm, func, variant='dark' }) => {\n    return (\n        <Form.Group as={Row} controlId={`form${typeOfForm}Button`}>\n            <Col sm={{ span: 1, offset: 6 }}>\n                <Button type='submit' variant={variant}>\n                    {label}\n                </Button>\n            </Col>\n        </Form.Group>\n    )\n}\n\nexport default FormGroupButton","import {\n  GET_VIEWING_PATIENT,\n  SET_VIEWING_PATIENT,\n  UPDATE_PATIENT,\n  DELETE_PATIENT,\n  CREATE_PATIENT\n} from '../constants'\nimport patientService from '../services/patientService'\nimport toastr from 'toastr'\n\nexport const getViewingPatient = (port, username) => async (dispatch) => {\n  try {\n    const patient = await patientService.getPatient(port, username)\n    dispatch(getPatientSuccess(patient))\n  } catch (err) {\n    toastr.error('Bad request, please try loading again.')\n  }\n}\n\nconst getPatientSuccess = (patient) => ({\n  type: GET_VIEWING_PATIENT,\n  payload: patient\n})\n\nexport const setViewingPatient = (patient) => ({\n  type: SET_VIEWING_PATIENT,\n  payload: patient\n})\n\nexport const updatePatient = (port, username, newPatient) => async (dispatch) => {\n  try {\n    const patient = await patientService.updatePatient(port, username, newPatient)\n    dispatch(updatePatientSuccess(patient))\n  } catch (err) {\n    toastr.error('Bad request, please try loading again.')\n  }\n}\n\nconst updatePatientSuccess = (patient) => ({\n  type: UPDATE_PATIENT,\n  payload: patient\n})\n\nexport const deletePatient = (port, username) => async (dispatch) => {\n  try {\n    const patient = await patientService.deletePatient(port, username)\n    dispatch(deletePatientSuccess(patient))\n  } catch (err) {\n    toastr.error('Bad request, please try loading again.')\n  }\n}\n\nconst deletePatientSuccess = (patient) => ({\n  type: DELETE_PATIENT,\n  payload: patient\n})\n\nexport const createPatient = (port, newPatient) => async (dispatch) => {\n  try {\n    const patient = await patientService.createPatient(port, newPatient)\n    dispatch(createPatientSuccess(patient))\n  } catch (err) {\n    toastr.error('Bad request, please try loading again.')\n  }\n}\n\nconst createPatientSuccess = (newPatient) => ({\n  type: CREATE_PATIENT,\n  payload: newPatient\n})\n","import React, { useEffect } from 'react'\nimport { useHistory, useParams } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport { updatePatient } from '../../actions/patientActions'\nimport { PORT } from '../../constants'\n// form imports\nimport Form from 'react-bootstrap/Form'\nimport FormGroupInput from '../FormGroupInput'\nimport FormGroupButton from '../FormGroupButton'\nimport { useForm, FormProvider } from 'react-hook-form'\n\nconst UpdatePatient = ({ patient }) => {\n  const dispatch = useDispatch()\n  const methods = useForm()\n\n  const { id } = useParams()\n  const history = useHistory()\n\n\n  useEffect(() => {\n    methods.setValue('name', patient?.name)\n    methods.setValue('email', patient?.email)\n    methods.setValue('note', patient?.note)\n    // eslint-disable-next-line\n  }, [patient])\n\n\n  const submitForm = (data) => {\n    const newPatient = {\n      ...patient,\n      name: data.name === '' ? null : data.name,\n      email: data.email === '' ? null : data.email,\n      note: data.note === '' ? null : data.note\n    }\n    dispatch(updatePatient(PORT, id, newPatient))\n    history.push('/patients')\n  }\n\n  return (\n    <div className='my-2'>\n      <FormProvider {...methods}>\n        <Form onSubmit={methods.handleSubmit(submitForm)} className='form form-horizontal'>\n          <div className='my-2'>\n            <FormGroupInput\n              groupType='name'\n              label='Name'\n              fieldType='text'\n              typeOfForm='UpdatePatient'\n              required='false'\n            />\n          </div>\n          <div>\n            <FormGroupInput\n              groupType='email'\n              label='Email'\n              fieldType='text'\n              typeOfForm='UpdatePatient'\n              required='false'\n            />\n          </div>\n          <div className='my-2'>\n            <FormGroupInput\n              groupType='note'\n              label='Note'\n              fieldType='text'\n              typeOfForm='UpdatePatient'\n              required='false'\n            />\n          </div>\n          <div className=\"my-2 col-md-6\">\n            <FormGroupButton\n              label='Update'\n              typeOfForm='UpdatePatient'\n              variant='primary'\n            />\n          </div>\n        </Form>\n      </FormProvider>\n    </div>\n  )\n}\n\nexport default UpdatePatient","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useParams, Link } from 'react-router-dom'\nimport { getViewingPatient, deletePatient } from '../../actions/patientActions'\nimport UpdatePatientForm from '../../components/UpdatePatientForm'\nimport { PORT } from '../../constants'\n\n// Get user and send to update form\nconst Patient = () => {\n  const { id } = useParams()\n  const viewingPatient = useSelector(({ patient }) => patient)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(getViewingPatient(PORT, id))\n    // eslint-disable-next-line\n  }, [id])\n\n  const onDeletePatientClick = () => {\n    dispatch(deletePatient(PORT, id))\n  }\n\n  return (\n    <div className=\"row\">\n      <div className=\"\">\n        <UpdatePatientForm patient={viewingPatient} />\n      </div>\n      <div className=\"row p-4 m-4\">\n        <Link to={\"/patients\"}><button className=\"btn btn-outline-danger\" onClick={() => onDeletePatientClick()}>Delete Patient</button></Link>;\n      </div>\n    </div>\n  )\n}\n\nexport default Patient","import { BsPencilSquare } from 'react-icons/bs'\nimport { Link } from 'react-router-dom'\n\nconst PatientDetails = ({ patient }) => {\n  return (\n    <tr key={patient.username}>\n      <td>{patient.username}</td>\n      <td>{patient.name}</td>\n      <td>{patient.email}</td>\n      <td>{patient.note}</td>\n      <td><Link to={`/patients/${patient.username}`}><BsPencilSquare size='1.5em' /></Link></td>\n    </tr>\n  )\n}\n\nexport default PatientDetails","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport { getPatients } from '../../actions/patientsActions'\nimport PatientDetails from '../../components/PatientDetails'\nimport { PORT } from '../../constants'\n\nconst PatientList = () => {\n  const patients = useSelector(({ patients }) => patients)\n  const [patientState, setPatientState] = useState([])\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    if (true) {\n      dispatch(getPatients(PORT))\n    }\n    // eslint-disable-next-line\n  }, [])\n\n  useEffect(() => {\n    setPatientState(patients)\n  }, [patients])\n\n  return (\n    <>\n    <div className='table'>\n      <table className='table table-bordered'>\n        <thead className='thead-dark'>\n          <tr>\n            <th>Username</th>\n            <th>Name</th>\n            <th>Email</th>\n            <th>Note</th>\n          </tr>\n        </thead>\n        <tbody>\n          {\n            patientState.length > 0\n              ? patientState.map((d) => (\n                <PatientDetails key={d.username} patient={d} />\n              ))\n              : null\n          }\n        </tbody>\n      </table>\n      {\n        patients.length <= 0\n          ? <>\n            <div className='text-center'>\n              <div className='spinner-border' role='status'></div>\n              <div className='sr-only'>Loading...</div>\n            </div>\n          </>\n          : null\n      }\n    </div>\n    <Link to={\"/patients/create\"}><button className=\"btn btn-outline-primary text-left\">Create Patient</button></Link>\n    </>\n  )\n}\n\nexport default PatientList","import React, { useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\nimport { createPatient } from '../../actions/patientActions'\n// form imports\nimport Form from 'react-bootstrap/Form'\nimport FormGroupInput from '../../components/FormGroupInput'\nimport FormGroupButton from '../../components/FormGroupButton'\nimport { useForm, FormProvider } from 'react-hook-form'\nimport { PORT } from '../../constants'\n\nconst CreatePatient = () => {\n  const dispatch = useDispatch()\n  const methods = useForm()\n  const history = useHistory()\n\n\n  useEffect(() => {\n    // eslint-disable-next-line\n  }, [])\n\n\n  const submitForm = (data) => {\n    const newPatient = {\n      name: data.name === '' ? null : data.name,\n      note: data.note === '' ? null : data.note,\n      email: data.email === '' ? null : data.email,\n      username: data.username === '' ? \"defaultUsername\" : data.email.split(\"@\")[0],\n    }\n    dispatch(createPatient(PORT ,newPatient))\n    history.push('/patients')\n  }\n\n  return (\n    <div className='my-2'>\n      <h1 className='createNew'>Create Patient</h1>\n      <FormProvider {...methods}>\n        <Form onSubmit={methods.handleSubmit(submitForm)} className='form form-horizontal'>\n          <div className='my-2'>\n            <FormGroupInput\n              groupType='name'\n              label='Name'\n              fieldType='text'\n              typeOfForm='CreatePatient'\n              required='true'\n            />\n          </div>\n          <div className='my-2'>\n            <FormGroupInput\n              groupType='email'\n              label='Email'\n              fieldType='text'\n              typeOfForm='CreatePatient'\n              required='true'\n            />\n          </div>\n          <div className='my-2'>\n            <FormGroupInput\n              groupType='note'\n              label='Note'\n              fieldType='text'\n              typeOfForm='CreatePatient'\n              required='true'\n            />\n          </div>\n          <div className='mx-auto'>\n            <FormGroupButton\n              label='Save'\n              typeOfForm='CreatePatient'\n              variant='primary'\n            />\n          </div>\n        </Form>\n      </FormProvider>\n    </div>\n  )\n}\n\nexport default CreatePatient","import React from 'react'\nimport { NavLink } from 'react-router-dom'\n\nconst NotFound = () => {\n  return (\n    <div className='notfound'>\n      <h1>404 Not Found</h1>\n      <NavLink\n        exact\n        to='/'\n        className='navigation-link'\n      >Go back to Homepage\n      </NavLink>\n    </div>\n  )\n}\n\nexport default NotFound","import { useState } from 'react'\nimport { Route, Switch } from 'react-router-dom'\nimport Container from './components/Container'\nimport Navbar from './components/Navbar'\nimport Home from './views/Home'\nimport Doctor from './views/Doctor'\nimport Nurse from './views/Nurse'\nimport Patient from './views/Patient'\nimport DoctorsList from './views/DoctorsList'\nimport NursesList from './views/NursesList'\nimport PatientsList from './views/PatientsList'\nimport CreateDoctor from './views/CreateDoctor'\nimport CreateNurse from './views/CreateNurse'\nimport CreatePatient from './views/CreatePatient'\nimport NotFound from './views/NotFound'\nimport DebugMode from './views/DebugMode'\nimport LiveMode from './views/LiveMode'\n\nimport './styles/App.css'\n\nconst App = () => {\n  const [debug, setDebug] = useState(true)\n\n  const updateDebugMode = (state) => {\n    setDebug(state)\n  }\n\n  return (\n    <div className=\"App\">\n      {/* {debug === true ? <DebugMode triggerUpdate={updateDebugMode} />\n        :\n        <> */}\n        {/* <LiveMode triggerUpdate={updateDebugMode} /> */}\n          <Navbar />\n          <Container>\n            <Switch>\n              <Route exact path='/' component={Home} />\n              {/* <Route exact path='/doctors' component={DoctorsList} />\n              <Route path='/doctors/create' component={CreateDoctor} />\n              <Route path='/doctors/:id' component={Doctor} /> */}\n              <Route exact path='/patients' component={PatientsList} />\n              <Route exact path='/patients/create' component={CreatePatient} />\n              <Route path='/patients/:id' component={Patient} />\n              {/* <Route exact path='/nurses' component={NursesList} />\n              <Route exact path='/nurses/create' component={CreateNurse} />\n              <Route path='/nurses/:id' component={Nurse} /> */}\n              <Route path='*' component={NotFound} />\n            </Switch>\n          </Container>\n        {/* </> */}\n       {/* } */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { GET_DOCTORS } from '../constants'\n\nconst doctorsReducer = (state = [], action) => {\n  switch (action.type) {\n    case GET_DOCTORS: return action.payload\n    default: return state\n  }\n}\n\nexport default doctorsReducer","import { GET_NURSES } from '../constants'\n\nconst nursesReducer = (state = [], action) => {\n  switch (action.type) {\n    case GET_NURSES: return action.payload\n    default: return state\n  }\n}\n\nexport default nursesReducer","import { GET_PATIENTS } from '../constants'\n\nconst patientsReducer = (state = [], action) => {\n  switch (action.type) {\n    case GET_PATIENTS: return action.payload\n    default: return state\n  }\n}\n\nexport default patientsReducer","import { GET_USER_ADMINS } from '../constants'\n\nconst userAdminsReducer = (state = [], action) => {\n  switch (action.type) {\n    case GET_USER_ADMINS: return action.payload\n    default: return state\n  }\n}\n\nexport default userAdminsReducer","import {\n  GET_VIEWING_DOCTOR,\n  SET_VIEWING_DOCTOR,\n  CREATE_DOCTOR,\n  DELETE_DOCTOR,\n  UPDATE_DOCTOR\n} from '../constants'\n\nconst doctorReducer = (state = {msg: {}, deleted: false}, action) => {\n  switch (action.type) {\n    case GET_VIEWING_DOCTOR: return action.payload\n    case SET_VIEWING_DOCTOR: return action.payload\n    case CREATE_DOCTOR: return action.payload\n    case UPDATE_DOCTOR: return action.payload\n    case DELETE_DOCTOR: return action.payload\n    default: return state\n  }\n}\n\nexport default doctorReducer","import {\n    GET_VIEWING_NURSE,\n    SET_VIEWING_NURSE,\n    CREATE_NURSE,\n    DELETE_NURSE,\n    UPDATE_NURSE\n  } from '../constants'\n  \n  const nurseReducer = (state = {msg: {}, deleted: false}, action) => {\n    switch (action.type) {\n      case GET_VIEWING_NURSE: return action.payload\n      case SET_VIEWING_NURSE: return action.payload\n      case CREATE_NURSE: return action.payload\n      case UPDATE_NURSE: return action.payload\n      case DELETE_NURSE: return action.payload\n      default: return state\n    }\n  }\n  \n  export default nurseReducer","import {\n    GET_VIEWING_PATIENT,\n    SET_VIEWING_PATIENT,\n    CREATE_PATIENT,\n    DELETE_PATIENT,\n    UPDATE_PATIENT\n  } from '../constants'\n  \n  const nurseReducer = (state = {msg: {}, deleted: false}, action) => {\n    switch (action.type) {\n      case GET_VIEWING_PATIENT: return action.payload\n      case SET_VIEWING_PATIENT: return action.payload\n      case CREATE_PATIENT: return action.payload\n      case UPDATE_PATIENT: return action.payload\n      case DELETE_PATIENT: return action.payload\n      default: return state\n    }\n  }\n  \n  export default nurseReducer","import {\n    GET_VIEWING_USER_ADMIN,\n    CREATE_USER_ADMIN,\n    DELETE_USER_ADMIN,\n    UPDATE_USER_ADMIN\n  } from '../constants'\n  \n  const userAdminReducer = (state = {msg: {}, deleted: false}, action) => {\n    switch (action.type) {\n      case GET_VIEWING_USER_ADMIN: return action.payload\n      case CREATE_USER_ADMIN: return action.payload\n      case UPDATE_USER_ADMIN: return action.payload\n      case DELETE_USER_ADMIN: return action.payload\n      default: return state\n    }\n  }\n  \n  export default userAdminReducer","import {\n    GET_HOSPITAL,\n    UPDATE_HOSPITAL\n  } from '../constants'\n  \n  const hospitalReducer = (state = {msg: {}}, action) => {\n    switch (action.type) {\n      case GET_HOSPITAL: return action.payload\n      case UPDATE_HOSPITAL: return action.payload\n      default: return state\n    }\n  }\n  \n  export default hospitalReducer","import { combineReducers } from 'redux'\nimport doctors from './doctorsReducer'\nimport nurses from './nursesReducer'\nimport patients from './patientsReducer'\nimport userAdmins from './userAdminsReducer'\nimport doctor from './doctorReducer'\nimport nurse from './nurseReducer'\nimport patient from './patientReducer'\nimport userAdmin from './userAdminReducer'\nimport hospital from './hospitalReducer'\n\nexport default combineReducers({\n  doctor,\n  nurse,\n  patient,\n  userAdmin,\n  doctors,\n  patients,\n  nurses,\n  userAdmins,\n  hospital\n})","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './styles/index.css'\nimport reportWebVitals from './reportWebVitals'\nimport { HashRouter as Router } from 'react-router-dom'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport reducers from './reducers'\nimport thunk from 'redux-thunk'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'toastr/build/toastr.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={createStore(reducers, composeWithDevTools(applyMiddleware(thunk)))}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()"],"sourceRoot":""}